// MAC_CFILE.CPP// Copyright (c) 2000 Joe Riedel, Nick Randal.// Author: Joe Riedel.#include "stdafx.h"#include <stdio.h>#include "mac_cfile.h"#include "futils.h"const int CFile::typeBinary = 0x00000001;const int CFile::modeRead = 0x00000002;const int CFile::modeWrite = 0x00000004;const int CFile::modeCreate = 0x000000080;const int CFile::modeNoTruncate = 0x000000080;const int CFile::shareDenyNone = 0x00000008;const int CFile::shareDenyWrite = 0x00000010;const int CFile::shareDenyRead = 0x00000020;const int CFile::shareDenyAll = 0x00000040;const int CFile::shareExclusive = 0x00000040;const int CFile::begin = 0;const int CFile::current = 1;const int CFile::end = 2;	CFile::CFile(){	m_nMode = 0;	m_nLength = 0;	m_pFile = NULL;}CFile::~CFile(){	Close();}	bool CFile::Open(const char* szFilename, int nModeFlags){	if(!(nModeFlags&typeBinary))		return false;	if((nModeFlags&(modeRead|modeWrite))==(modeRead|modeWrite))		return false;		m_nMode = nModeFlags;		char szTemp[1024];	strcpy(szTemp, szFilename);	ConvertUnixPath(szTemp);		m_sFilename = szTemp;		if(nModeFlags&modeRead)	{		m_pFile = fopen(szTemp, "rb");		if(m_pFile == NULL)			return false;		m_nLength = GetLength();	}	else	{		m_nLength = 0;		m_pFile = fopen(szTemp, "wb");		if(m_pFile == NULL)			return false;	}		return true;}unsigned int CFile::GetPosition() const{	if(m_pFile == NULL)		return 0;			return ftell(m_pFile);}void CFile::Close(){	if(m_pFile != NULL)		fclose(m_pFile);	m_pFile = NULL;	m_nLength = 0;	m_sFilename = "";	m_nMode = 0;}unsigned int CFile::Read(void* lpBuf, unsigned int nCount){	if(m_pFile == NULL)		return 0;	if(m_nMode&modeWrite)		return 0;		return fread(lpBuf, 1, nCount, m_pFile);}unsigned int CFile::Write(const void* lpBuf, unsigned int nCount){	if(m_pFile == NULL)		return 0;	if(m_nMode&modeRead)		return 0;	return fwrite(lpBuf, 1, nCount, m_pFile);}int CFile::Seek(int nOff, int nFrom) const{	int nOrigin;		switch(nFrom)	{	case current:		nOrigin = SEEK_CUR;		break;	case begin:		nOrigin = SEEK_SET;		break;	case end:		nOrigin = SEEK_END;		break;	}		fseek(m_pFile, nOff, nOrigin);	return (int)GetPosition();}unsigned int CFile::GetLength() const{	if(m_pFile == NULL)		return 0;			// Record current position.	unsigned int nOff = GetPosition();	Seek(0, end);	unsigned int nSize = GetPosition()+1;	Seek((int)nOff, begin);	return nSize;}CString CFile::GetFilePath() const{	return m_sFilename;}