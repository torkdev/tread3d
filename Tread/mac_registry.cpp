// MAC_REGISTRY.CPP// Copyright (c) 2000 Joe Riedel, Nick Randal.// Author: Joe Riedel.#include "stdafx.h"#include "mac_registry.h"#include "futils.h"#define REG_TYPE_STRING		1#define REG_TYPE_INTEGER	2CMacRegistry theRegistry;CMacRegistry* GetTreadMacRegistry() { return &theRegistry; }CMacRegistry::CMacRegistry(){}CMacRegistry::~CMacRegistry(){}bool CMacRegistry::InitRegistry(){	// Not being able to read the .reg file is not a bad thing.	bool bRead = ReadRegFile("tread.reg");			//load the strings	m_pString[S_TREAD_PATH] = ":resources";//GetProfileString("Settings", "Path", "resources");	m_pString[S_USER_NAME] = GetProfileString("Settings", "User", "UN-LICENSED COPY");	m_pString[S_3D_PAK] = GetProfileString("Settings", "3D_pak", "dflt_wogl");	m_pString[S_2D_PAK] = GetProfileString("Settings", "2D_pak", "dflt_wogl");		//load the ints	m_pInt[I_BACKPLANE] = GetProfileInt("Settings", "BackPlane", 1000);	m_pInt[I_GAMMA] = GetProfileInt("Settings", "Gamma", 100);	m_pInt[I_MAXMAP] = GetProfileInt("Settings", "MaxMap", 6);	m_pInt[I_CURVESUBDEPTH] = GetProfileInt("Settings", "CurveSubDepth", 3);	m_pInt[I_TEX_MEMORY] = GetProfileInt("Settings", "TextureMemory", 8388608);	//load the bools	m_pBool[B_FIRST_RUN] = GetProfileInt("Settings", "FirstRun", true);	m_pBool[B_VISGROUP_APPLY] = GetProfileInt("Settings", "VisgroupApply", true);	m_pBool[B_DEBUG] = GetProfileInt("Settings", "Debug", false);	m_pBool[B_SMARTNAME] = GetProfileInt("Settings", "SmartName", false);	m_pBool[B_SELECTIONMASK] = GetProfileInt("Settings", "SelectionMask", true);	m_pBool[B_FACEAUTOAPPLY] = GetProfileInt("Settings", "FaceAutoApply", true);	m_pBool[B_NOSPLASH] = GetProfileInt("Settings", "NoSplashScreen", false);	//READ ONLY	m_pBool[B_LOAD_PLUGINS] = GetProfileInt("Settings", "LoadPlugins", true);	//READ ONLY	m_pBool[B_REGISTER] = GetProfileInt("Settings", "Registered", false);		//READ ONLY	m_pBool[B_IE4] = GetProfileInt("Settings", "IsIE4", false);					//READ ONLY	m_pBool[B_ANIMATECOLORS] = GetProfileInt("Settings", "AnimateColors", true);		if(!bRead)		return FlushRegistry();			return true;}bool CMacRegistry::FlushRegistry(){	//save the strings	WriteProfileString("Settings", "Path", m_pString[S_TREAD_PATH]);	WriteProfileString("Settings", "User", m_pString[S_USER_NAME]);	WriteProfileString("Settings", "3D_pak", m_pString[S_3D_PAK]);	WriteProfileString("Settings", "2D_pak", m_pString[S_2D_PAK]);	//save the ints	WriteProfileInt("Settings", "BackPlane", m_pInt[I_BACKPLANE]);	WriteProfileInt("Settings", "Gamma", m_pInt[I_GAMMA]);	WriteProfileInt("Settings", "MaxMap", m_pInt[I_MAXMAP]);	WriteProfileInt("Settings", "CurveSubDepth", m_pInt[I_CURVESUBDEPTH]);	WriteProfileInt("Settings", "TextureMemory", m_pInt[I_TEX_MEMORY]);	//save the bools	WriteProfileInt("Settings", "FirstRun", false/*m_pBool[B_FIRST_RUN]*/);	WriteProfileInt("Settings", "VisgroupApply", m_pBool[B_VISGROUP_APPLY]);	WriteProfileInt("Settings", "Debug", m_pBool[B_DEBUG]);	WriteProfileInt("Settings", "SmartName", m_pBool[B_SMARTNAME]);	WriteProfileInt("Settings", "SelectionMask", m_pBool[B_SELECTIONMASK]);	WriteProfileInt("Settings", "FaceAutoApply", m_pBool[B_FACEAUTOAPPLY]);	WriteProfileInt("Settings", "AnimateColors", m_pBool[B_ANIMATECOLORS]);	if(m_pBool[B_REGISTER])		WriteProfileInt("Settings", "Registered", m_pBool[B_FACEAUTOAPPLY]);			return WriteRegFile("tread.reg");}REGENTRY* CMacRegistry::FindEntry(const CString& sPath, const CString& sName, const int nType){	REGENTRY* pEntry;		for(pEntry = m_RegList.ResetPos(); pEntry != NULL; pEntry = m_RegList.GetNextItem())	{		if(pEntry->sPath == sPath &&			pEntry->sName == sName &&			pEntry->nType == nType)			return pEntry;	}		return NULL;}bool CMacRegistry::ReadRegFile(const CString& sPath){	int i, nNum;	CString sTag;	CFile hFile;	REGENTRY* pEntry;		m_RegList.DestroyList();		if(!hFile.Open(sPath, CFile::modeRead | CFile::typeBinary))		return false;			if(!ReadString(hFile, sTag))		return false;	if(sTag != "reg")		return false;	if(!ReadInt(hFile, nNum))		return false;		for(i = 0; i < nNum; i++)	{		pEntry = new REGENTRY();		ReadInt(hFile, pEntry->nType);		ReadString(hFile, pEntry->sPath);		ReadString(hFile, pEntry->sName);		if(pEntry->nType == REG_TYPE_INTEGER)			ReadInt(hFile, pEntry->nVal);		else			ReadString(hFile, pEntry->sVal);					m_RegList.AddItem(pEntry);	}		hFile.Close();	return true;}bool CMacRegistry::WriteRegFile(const CString& sPath){	int nNum;	CFile hFile;	REGENTRY* pEntry;		if(!hFile.Open(sPath, CFile::modeWrite | CFile::typeBinary))		return false;	WriteString(hFile, "reg");		nNum = m_RegList.GetCount();	WriteInt(hFile, nNum);	for(pEntry = m_RegList.ResetPos(); pEntry != NULL; pEntry = m_RegList.GetNextItem())	{		WriteInt(hFile, pEntry->nType);		WriteString(hFile, pEntry->sPath);		WriteString(hFile, pEntry->sName);		if(pEntry->nType == REG_TYPE_INTEGER)			WriteInt(hFile, pEntry->nVal);		else			WriteString(hFile, pEntry->sVal);	}		hFile.Close();	return true;}	int CMacRegistry::GetProfileInt(const char* szPath, const char* szName, int nDefault){	REGENTRY* pE = FindEntry(szPath, szName, REG_TYPE_INTEGER);	if(pE == NULL)		return nDefault;	return pE->nVal;}void CMacRegistry::WriteProfileInt(const char* szPath, const char* szName, int nValue){	REGENTRY* pE = FindEntry(szPath, szName, REG_TYPE_INTEGER);	if(pE != NULL)	{		pE->nVal = nValue;		return;	}		pE = new REGENTRY();	pE->sPath = szPath;	pE->sName = szName;	pE->nVal = nValue;	pE->nType = REG_TYPE_INTEGER;	m_RegList.AddItem(pE);}CString CMacRegistry::GetProfileString(const char* szPath, const char* szName, const char* szDefault){	REGENTRY* pE = FindEntry(szPath, szName, REG_TYPE_STRING);	if(pE == NULL)		return szDefault;	return pE->sVal;}void CMacRegistry::WriteProfileString(const char* szPath, const char* szName, const char* szValue){	REGENTRY* pE = FindEntry(szPath, szName, REG_TYPE_INTEGER);	if(pE != NULL)	{		pE->sVal = szValue;		return;	}		pE = new REGENTRY();	pE->sPath = szPath;	pE->sName = szName;	pE->sVal = szValue;	pE->nType = REG_TYPE_STRING;	m_RegList.AddItem(pE);}