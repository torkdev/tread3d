
////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1998, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files

    #include "sdlang.h"
    #include "sddialog.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "Uninst.isu"

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdComponentDialog2();
    prototype DialogShowSdSelectFolder();
    prototype DialogShowSdFinishReboot();

    // your script function prototypes


    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bIsWindowsNT4, bIsWindowsNT351, bIsWindows98, bIsWindows95;
    BOOL        bIsShellExplorer, bInstallAborted, bIs32BitSetup;
    STRING      svDir;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;

    BOOL	bFound[5];

    STRING sQuake;
    STRING sQuake2;
    STRING sHalflife;
    STRING sKingpin;

	#define QUAKE		0
	#define QUAKE2		1
	#define HALFLIFE	2
	#define KINGPIN		3

    // your global variables


///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    CheckRequirements();

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;


    end_install:

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;

begin

    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
    nResult = DialogShowSdLicense();
    if (nResult = BACK) goto Dlg_SdWelcome;

    Dlg_SdAskDestPath:
    nResult = DialogShowSdAskDestPath();
    if (nResult = BACK) goto Dlg_SdLicense;

    Dlg_SdComponentDialog2:
    if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
        goto Dlg_SdAskDestPath;
    endif;
    nResult = DialogShowSdComponentDialog2();
    if (nResult = BACK) goto Dlg_SdAskDestPath;

    Dlg_SdSelectFolder:
    nResult = DialogShowSdSelectFolder();
    if (nResult = BACK) goto Dlg_SdComponentDialog2;

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    STRING svLogFile;
    NUMBER nResult;
    NUMBER nDriveType, nSpace;
    NUMBER nCount, n, k;
    STRING sCurrent, sResult;
    LIST idList;
    STRING sTemp;
    NUMBER nRange;
    STRING sGames;

begin

  // Create app information, uninstallation, and App Paths registry keys.

    InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

    svLogFile = UNINST_LOGFILE_NAME;

    nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((bIs32BitSetup) && (bIsShellExplorer)) then
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
    endif;

    // TO DO : any other tasks you want to perform before file transfer
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the line below:
    //
    //     Enable ( SELFREGISTERBATCH );
    MessageBeep ( 0 );
    MessageBox ( "Setup will now search for the game directories. This may take a while. Click OK to continue." , INFORMATION );

	bFound[QUAKE] = FALSE;
	bFound[QUAKE2] = FALSE;
	bFound[KINGPIN] = FALSE;
	bFound[HALFLIFE] = FALSE;

    idList = ListCreate(STRINGLIST);
    nDriveType = FIXED_DRIVE | REMOVEABLE_DRIVE;
    nSpace = 20971520;
    GetValidDrivesList ( idList , nDriveType , nSpace );
    nCount = ListCount(idList);     //get the drive count

    nRange = nCount * 4;    //multiply by the nmber of games
    nCount--;    //change the count to an index value
    if(nRange == 0) then
        nRange = 1;
    endif;
    k = 0;
    StatusUpdate(OFF, nRange);
    Enable( STATUS );

//The following loop will find all of the game executables
    for n = 0 to nCount
        ListSetIndex(idList, n);
        ListCurrentString(idList, sCurrent);
        sCurrent[1] = ':';
        sCurrent[2] = '\\';

        //search for quake
        sTemp = "Searching   " + sCurrent + "   for Quake(tm)";
        SetStatusWindow((k * 100) / nRange, sTemp);
        k++;
        if(!bFound[QUAKE]) then
            FindAllFiles ( sCurrent , "Quake.exe" , sResult , RESET );
            if(sResult[0] != NULL) then
                bFound[QUAKE] = TRUE;
                sQuake = sResult;
                sResult[0] = NULL;
            endif;
        endif;

        //search for QUAKE II
        sTemp = "Searching   " + sCurrent + "   for Quake2(tm)";
        SetStatusWindow((k * 100) / nRange, sTemp);
        k++;
        if(!bFound[QUAKE2]) then
            FindAllFiles ( sCurrent , "Quake2.exe" , sResult , RESET );
            if(sResult[0] != NULL) then
                bFound[QUAKE2] = TRUE;
                sQuake2 = sResult;
                sResult[0] = NULL;
            endif;
        endif;

        //search for half-life
        sTemp = "Searching   " + sCurrent + "   for Half-life(tm)";
        SetStatusWindow((k * 100) / nRange, sTemp);
        k++;
        if(!bFound[HALFLIFE]) then
            FindAllFiles ( sCurrent , "Hl.exe" , sResult , RESET );
            if(sResult[0] != NULL) then
                bFound[HALFLIFE] = TRUE;
                sHalflife = sResult;
                sResult[0] = NULL;
            endif;
        endif;

        //search for kingpin
        sTemp = "Searching   " + sCurrent + "   for Kingpin(tm)";
        SetStatusWindow((k * 100) / nRange, sTemp);
        k++;
        if(!bFound[KINGPIN]) then
            FindAllFiles ( sCurrent , "Kingpin.exe" , sResult , RESET );
            if(sResult[0] != NULL) then
                bFound[KINGPIN] = TRUE;
                sKingpin = sResult;
                sResult[0] = NULL;
            endif;
        endif;
   endfor;

   SetStatusWindow(100, "Finished");
   Delay(1);

    Disable( STATUS );
    ListDestroy(idList);

    sGames = "Setup found:\n";
    if(bFound[QUAKE]) then
        sGames = sGames + "Quake(tm)\n";
    endif;
    if(bFound[QUAKE2]) then
        sGames = sGames + "Quake2(tm)\n";
    endif;
    if(bFound[HALFLIFE]) then
        sGames = sGames + "Half-life(tm)\n";
    endif;
    if(bFound[KINGPIN]) then
        sGames = sGames + "Kingpin(tm)\n";
    endif;

    if( !(bFound[QUAKE] | bFound[QUAKE2] | bFound[HALFLIFE] | bFound[KINGPIN]) ) then
    	sGames = sGames + "No supported games\n";
    endif;

    sGames = sGames + "\nClick OK to continue...";
    MessageBeep ( 0 );
    MessageBox ( sGames , INFORMATION );

//Remove the executables from the end of the path.
//----------QUAKE
    nCount = StrLength ( sQuake ) - 1;
    for n = nCount downto 0
        if(sQuake[n] != '\\') then
            sQuake[n] = NULL;
        else
            goto Stop1;
        endif;
    endfor;

Stop1:
    StrRemoveLastSlash( sQuake );
//----------QUAKE

//----------QUAKE2
    nCount = StrLength ( sQuake2 ) - 1;
    for n = nCount downto 0
        if(sQuake2[n] != '\\') then
            sQuake2[n] = NULL;
        else
            goto Stop2;
        endif;
    endfor;

Stop2:
    StrRemoveLastSlash ( sQuake2 );
//----------QUAKE2

//----------HALFLIFE
    nCount = StrLength ( sHalflife ) - 1;
    for n = nCount downto 0
        if(sHalflife[n] != '\\') then
            sHalflife[n] = NULL;
        else
            goto Stop4;
        endif;
    endfor;

Stop4:
    StrRemoveLastSlash ( sHalflife );
//----------HALFLIFE

//----------KINGPIN
    nCount = StrLength ( sKingpin ) - 1;
    for n = nCount downto 0
        if(sKingpin[n] != '\\') then
            sKingpin[n] = NULL;
        else
            goto Stop5;
        endif;
    endfor;

Stop5:
    StrRemoveLastSlash ( sKingpin );
//----------KINGPIN

    //Create any needed drirectories under the games

//------------------------------QUAKE
    if(bFound[QUAKE] = TRUE) then
        sCurrent = sQuake ^ "\\ID1\\maps";
        if(ExistsDir ( sCurrent ) = NOTEXISTS) then
           CreateDir ( sCurrent );
        endif;
    endif;

//------------------------------QUAKE2
    if(bFound[QUAKE2] = TRUE) then
        sCurrent = sQuake2 ^ "\\baseq2\\maps";
        if(ExistsDir ( sCurrent ) = NOTEXISTS) then
            CreateDir ( sCurrent );
        endif;

        sCurrent = sQuake2 ^ "\\baseq2\\pics";
        if(ExistsDir ( sCurrent ) = NOTEXISTS) then
            CreateDir ( sCurrent );
        endif;
    endif;

//------------------------------HALFLIFE
    if(bFound[HALFLIFE] = TRUE) then
        sCurrent = sHalflife ^ "\\valve\\maps";
        if(ExistsDir ( sCurrent ) = NOTEXISTS) then
            CreateDir ( sCurrent );
        endif;
    endif;

//------------------------------KINGPIN
    if(bFound[KINGPIN] = TRUE) then
        sCurrent = sKingpin ^ "\\main\\maps";
        if(ExistsDir ( sCurrent ) = NOTEXISTS) then
            CreateDir ( sCurrent );
        endif;

        sCurrent = sKingpin ^ "\\main\\pics";
        if(ExistsDir ( sCurrent ) = NOTEXISTS) then
            CreateDir ( sCurrent );
        endif;
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;
    STRING sMessage, sPath;

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = ComponentMoveData( MEDIA, nDisk, 0 );

	//BEGIN CODE
	if(bFound[QUAKE2] = TRUE) then
        VarSave (SRCTARGETDIR);
        TARGETDIR = sQuake2 ^ "\\baseq2\\pics";
        sPath = "colormap.pcx";
        if(CopyFile ( sPath , sPath ) != 0) then
            sMessage = "Cannot copy the file " ^ sPath;
            MessageBox ( sMessage , WARNING );
        endif;
        VarRestore (SRCTARGETDIR);
    endif;

    if(bFound[KINGPIN] = TRUE) then
        VarSave (SRCTARGETDIR);
        TARGETDIR = sKingpin ^ "\\main\\pics";
        sPath = "colormap2.pcx";
        if(CopyFile ( sPath , "colormap.pcx" ) != 0) then
            sMessage = "Cannot copy the file " ^ sPath;
            MessageBox ( sMessage , WARNING );
        endif;
        VarRestore (SRCTARGETDIR);
    endif;

    /*sPath = "readme.txt";
    if(CopyFile ( sPath , sPath ) != 0) then
        sMessage = "Cannot copy the file " ^ sPath;
        MessageBox ( sMessage , WARNING );
    endif;*/
    //END CODE

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile, szMsg;

begin

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the lines below:
    //
    //     if Do ( SELFREGISTRATIONPROCESS ) < 0 then
    //         szMsg = "File(s) failed to self-register: \n" + ERRORFILENAME;
    //         MessageBox (szMsg, WARNING);
    //     endif;

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    szReferenceFile = svDir ^ @PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    DeinstallSetReference( szReferenceFile );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult;
    STRING sSettings, sGames, sKey, svPath;

begin

    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.

    nResult = CreateRegistrySet( "" );
  	nResult = 0;

	sSettings = "Software\\Prospect Vector\\Tread3D\\Settings\\";
	sGames = "Software\\Prospect Vector\\Tread3D\\Settings\\Games\\";

	//-----------------------( STANDARD SETTINGS )
    RegDBSetDefaultRoot ( HKEY_CURRENT_USER );
    RegDBSetKeyValueEx ( sSettings , "Path" , REGDB_STRING , TARGETDIR , -1 );
    //-----------------------( STANDARD SETTINGS )


    //-----------------------( QUAKE )
    sKey = sGames + "Quake\\build\\";

    svPath = TARGETDIR ^ "\\Quake\\qbsp.exe";
    RegDBSetKeyValueEx ( sKey + "@@BspSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake\\vis.exe";
    RegDBSetKeyValueEx ( sKey  + "@@VisSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake\\light.exe";
    RegDBSetKeyValueEx ( sKey + "@@LightSection", "path" , REGDB_STRING , svPath , -1 );

    //-----------------------( PAINKEEP )
    sKey = sGames + "PainKeep\\build\\";

    svPath = TARGETDIR ^ "\\Quake\\qbsp.exe";
    RegDBSetKeyValueEx ( sKey + "@@BspSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake\\vis.exe";
    RegDBSetKeyValueEx ( sKey  + "@@VisSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake\\light.exe";
    RegDBSetKeyValueEx ( sKey + "@@LightSection", "path" , REGDB_STRING , svPath , -1 );
    //-----------------------( PAINKEEP )

    if(sQuake[0] != NULL) then
    	sKey = sGames + "Quake\\build\\";
        RegDBSetKeyValueEx ( sKey + "@@GameDir", "path" , REGDB_STRING , sQuake , -1 );

        svPath = sQuake + "\\quake.exe";
        RegDBSetKeyValueEx ( sKey + "@@Quake", "path" , REGDB_STRING , svPath , -1 );

        svPath = sQuake + "\\ID1\\Maps";
        RegDBSetKeyValueEx ( sKey + "@@MapDir", "path" , REGDB_STRING , svPath , -1 );

        //-----------------------( PAINKEEP )
        sKey = sGames + "PainKeep\\build\\";
        RegDBSetKeyValueEx ( sKey + "@@GameDir", "path" , REGDB_STRING , sQuake , -1 );

        svPath = sQuake + "\\quake.exe";
        RegDBSetKeyValueEx ( sKey + "@@Quake", "path" , REGDB_STRING , svPath , -1 );

        svPath = sQuake + "\\ID1\\Maps";
        RegDBSetKeyValueEx ( sKey + "@@MapDir", "path" , REGDB_STRING , svPath , -1 );
        //-----------------------( PAINKEEP )
    endif;
    //-----------------------( QUAKE )


	//-----------------------( QUAKE2 )
	sKey = sGames + "Quake2\\build\\";
	
	svPath = TARGETDIR ^ "\\Quake2\\qbsp3.exe";
	RegDBSetKeyValueEx ( sKey + "@@BspSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake2\\qvis3.exe";
    RegDBSetKeyValueEx ( sKey + "@@VisSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake2\\qrad3.exe";
    RegDBSetKeyValueEx ( sKey + "@@RadSection", "path" , REGDB_STRING , svPath , -1 );

    //-----------------------( ACTIONQ2 )
    sKey = sGames + "Actionq2\\build\\";
	
	svPath = TARGETDIR ^ "\\Quake2\\qbsp3.exe";
	RegDBSetKeyValueEx ( sKey + "@@BspSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake2\\qvis3.exe";
    RegDBSetKeyValueEx ( sKey + "@@VisSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Quake2\\qrad3.exe";
    RegDBSetKeyValueEx ( sKey + "@@RadSection", "path" , REGDB_STRING , svPath , -1 );
    //-----------------------( ACTIONQ2 )

    if(sQuake2[0] != NULL) then
    	sKey = sGames + "Quake2\\build\\";
        RegDBSetKeyValueEx ( sKey + "@@GameDir", "path" , REGDB_STRING , sQuake2 , -1 );

        svPath = sQuake2 + "\\quake2.exe";
        RegDBSetKeyValueEx ( sKey + "@@Quake2", "path" , REGDB_STRING , svPath , -1 );

        svPath = sQuake2 + "\\Baseq2\\Maps";
        RegDBSetKeyValueEx ( sKey + "@@MapDir", "path" , REGDB_STRING , svPath , -1 );

        //-----------------------( ACTIONQ2 )
        sKey = sGames + "Actionq2\\build\\";
        RegDBSetKeyValueEx ( sKey + "@@GameDir", "path" , REGDB_STRING , sQuake2 , -1 );

        svPath = sQuake2 + "\\quake2.exe";
        RegDBSetKeyValueEx ( sKey + "@@Quake2", "path" , REGDB_STRING , svPath , -1 );

        svPath = sQuake2 + "\\Baseq2\\Maps";
        RegDBSetKeyValueEx ( sKey + "@@MapDir", "path" , REGDB_STRING , svPath , -1 );
    	//-----------------------( ACTIONQ2 )
    endif;
    //-----------------------( QUAKE2 )


	//-----------------------( HALFLIFE )
	sKey = sGames + "Halflife\\build\\";
	
    svPath = TARGETDIR ^ "\\Halflife\\qbsp2.exe";
    RegDBSetKeyValueEx ( sKey + "@@BspSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Halflife\\qcsg.exe";
    RegDBSetKeyValueEx ( sKey + "@@CsgSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Halflife\\vis.exe";
    RegDBSetKeyValueEx ( sKey + "@@VisSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Halflife\\qrad.exe";
    RegDBSetKeyValueEx ( sKey + "@@RadSection", "path" , REGDB_STRING , svPath , -1 );

    if(sHalflife[0] != NULL) then
    	sKey = sGames + "Halflife\\build\\";
        RegDBSetKeyValueEx ( sKey + "@@GameDir", "path" , REGDB_STRING , sHalflife , -1 );

        svPath = sHalflife + "\\hl.exe";
        RegDBSetKeyValueEx ( sKey + "@@Halflife", "path" , REGDB_STRING , svPath , -1 );

        svPath = sHalflife + "\\valve\\Maps";
        RegDBSetKeyValueEx ( sKey + "@@MapDir", "path" , REGDB_STRING , svPath , -1 );
    endif;
    //-----------------------( HALFLIFE )


	//-----------------------( KINGPIN )
	sKey = sGames + "Kingpin\\build\\";
	
    svPath = TARGETDIR ^ "\\Kingpin\\qbsp3.exe";
    RegDBSetKeyValueEx ( sKey + "@@BspSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Kingpin\\qvis3.exe";
    RegDBSetKeyValueEx ( sKey + "@@VisSection", "path" , REGDB_STRING , svPath , -1 );

    svPath = TARGETDIR ^ "\\Kingpin\\qrad3.exe";
    RegDBSetKeyValueEx ( sKey + "@@RadSection", "path" , REGDB_STRING , svPath , -1 );

    if(sKingpin[0] != NULL) then
    	sKey = sGames + "Kingpin\\build\\";
        RegDBSetKeyValueEx ( sKey + "@@GameDir", "path" , REGDB_STRING , sKingpin , -1 );

        svPath = sKingpin + "\\kingpin.exe";
        RegDBSetKeyValueEx ( sKey + "@@Kingpin", "path" , REGDB_STRING , svPath , -1 );

        svPath = sKingpin + "\\main\\Maps";
        RegDBSetKeyValueEx ( sKey + "@@MapDir", "path" , REGDB_STRING , svPath , -1 );
    endif;
    //-----------------------( KINGPIN )

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
    NUMBER nResult;
    STRING svPath, svFolder;

begin


    // TO DO : Add all your folders (or program groups) along with shortcuts (or
    // program items). Call CreateProgramFolder and AddFolderIcon, and/or create
    // shortcuts etc. from the InstallShield IDE's Resources pane.
    //
    // Note : for 16-bit setups you should add an uninstaller icon pointing to
    //        your log file.  Under 32-bit this is automatically done by Windows.

    nResult = CreateShellObjects( "" );
    nResult = 0;

    svFolder = FOLDER_PROGRAMS ^ SHELL_OBJECT_FOLDER;
    svPath = TARGETDIR ^ "Tread3d.exe";
    LongPathToQuote ( svPath , TRUE );
    AddFolderIcon ( svFolder , "Tread3D - 2.0" , svPath , "" , "" , 0 , "" , REPLACE);

    svPath = TARGETDIR ^ "ExtPak2.exe";
    LongPathToQuote ( svPath , TRUE );
    AddFolderIcon ( svFolder , "ExtPak2 Utility" , svPath , "" , "" , 0 , "" , REPLACE);

    svPath = TARGETDIR ^ "readme.txt";
    LongPathToQuote ( svPath , TRUE );
    AddFolderIcon ( svFolder , "Tread Readme" , svPath , "" , "" , 0 , "" , REPLACE);

    svPath = TARGETDIR ^ "gdfedit2.exe";
    LongPathToQuote ( svPath , TRUE );
    AddFolderIcon ( svFolder , "GDF Edit2" , svPath , "" , "" , 0 , "" , REPLACE);

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin


    if (bInstallAborted) then
        return 0;
    endif;

    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    if (bIs32BitSetup) then
        svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
    else
        svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use short names
    endif;

    TARGETDIR  = svDir;

    SdProductName( @PRODUCT_NAME );

    Enable( DIALOGCACHE );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()
	STRING sPath;
begin

	PlaceWindow(STATUS, 50, 20, LOWER_RIGHT);
	PlaceWindow(FEEDBACK , 50 , 20 , LOWER_LEFT );
	
	sPath = SUPPORTDIR ^ "Background.bmp";
	PlaceBitmap ( sPath , 10 , CENTERED , CENTERED , CENTERED );
	
    Disable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );
    SetColor(BACKGROUND, RGB(50, 100, 220) | BK_SMOOTH);
    SetTitle( "Prospect Vector presents...  Tread3D-2 v1.00\n         Release Candidate 1", 32, RGB(220, 100, 50) );

    SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

    Enable( BACKGROUND );

    Delay( 1 );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

begin

    bIsShellExplorer = FALSE;
    bIsWindowsNT4    = FALSE;
    bIsWindowsNT351  = FALSE;
    bIsWindows95     = FALSE;
    bIsWindows98     = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult = IS_WINDOWSNT) then
        // Check to see if OS is Windows NT 4.0 or Windows NT 3.51,
        // and if the shell being used is the Explorer shell.
        if (GetSystemInfo( WINMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
                bIsShellExplorer = TRUE;
                bIsWindowsNT4 = TRUE;
            else
            	bIsWindowsNT351 = TRUE;
            endif;
        endif;

    elseif (nvResult = IS_WINDOWS9X) then
        bIsShellExplorer = TRUE;
        // Check to see if OS is Windows 95 or Windows 98
        GetSystemInfo (WINMINOR, nvResult, svResult);
        if (nvResult < 10) then
           bIsWindows95 = TRUE;
        else
           bIsWindows98 = TRUE;
        endif;
    endif;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin

    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );

    TARGETDIR = svDir;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdComponentDialog2
//
//  Purpose: This function displays the custom component dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if ((svSetupType != "Custom") && (svSetupType != "")) then
        return 0;
    endif;

    szTitle  = "";
    szMsg    = "";
    nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdSelectFolder
//
//  Purpose: This function displays the standard folder selection dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSelectFolder()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if (SHELL_OBJECT_FOLDER = "") then
        SHELL_OBJECT_FOLDER = @FOLDER_NAME;
    endif;

    szTitle    = "";
    szMsg      = "";
    nResult    = SdSelectFolder( szTitle, szMsg, SHELL_OBJECT_FOLDER );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;
    STRING svPath;

begin

    if (!BATCH_INSTALL) then
        bOpt1 = TRUE;
        bOpt2 = FALSE;
        szMsg1 = "";
        szMsg2 = "";
        szOption1 = "Place shortcut on my desktop.";
        szOption2 = "";//"View Tread3D readme file.";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );

        if(bOpt1 = TRUE) then
        	svPath = TARGETDIR ^ "Tread3D.exe";
    		LongPathToQuote ( svPath , TRUE );
    		AddFolderIcon ( FOLDER_DESKTOP , "Tread3D" , svPath , "" , "" , 0 , "" , REPLACE);
        endif;

        if(bOpt2 = TRUE) then
        	LaunchAppAndWait( "Notepad.exe", TARGETDIR ^ "Readme.txt", WAIT );
        endif;

        return 0;
    endif;

    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

    return nResult;
end;

// --- include script file section ---

#include "sddialog.rul"










